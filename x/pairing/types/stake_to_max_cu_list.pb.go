// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/stake_to_max_cu_list.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakeToMaxCUList struct {
	List []StakeToMaxCU `protobuf:"bytes,1,rep,name=List,proto3" json:"List"`
}

func (m *StakeToMaxCUList) Reset()         { *m = StakeToMaxCUList{} }
func (m *StakeToMaxCUList) String() string { return proto.CompactTextString(m) }
func (*StakeToMaxCUList) ProtoMessage()    {}
func (*StakeToMaxCUList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3371a34462f71f99, []int{0}
}
func (m *StakeToMaxCUList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeToMaxCUList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeToMaxCUList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeToMaxCUList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeToMaxCUList.Merge(m, src)
}
func (m *StakeToMaxCUList) XXX_Size() int {
	return m.Size()
}
func (m *StakeToMaxCUList) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeToMaxCUList.DiscardUnknown(m)
}

var xxx_messageInfo_StakeToMaxCUList proto.InternalMessageInfo

func (m *StakeToMaxCUList) GetList() []StakeToMaxCU {
	if m != nil {
		return m.List
	}
	return nil
}

type StakeToMaxCU struct {
	StakeThreshold  types.Coin `protobuf:"bytes,1,opt,name=StakeThreshold,proto3" json:"StakeThreshold"`
	MaxComputeUnits uint64     `protobuf:"varint,2,opt,name=MaxComputeUnits,proto3" json:"MaxComputeUnits,omitempty"`
}

func (m *StakeToMaxCU) Reset()         { *m = StakeToMaxCU{} }
func (m *StakeToMaxCU) String() string { return proto.CompactTextString(m) }
func (*StakeToMaxCU) ProtoMessage()    {}
func (*StakeToMaxCU) Descriptor() ([]byte, []int) {
	return fileDescriptor_3371a34462f71f99, []int{1}
}
func (m *StakeToMaxCU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeToMaxCU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeToMaxCU.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeToMaxCU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeToMaxCU.Merge(m, src)
}
func (m *StakeToMaxCU) XXX_Size() int {
	return m.Size()
}
func (m *StakeToMaxCU) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeToMaxCU.DiscardUnknown(m)
}

var xxx_messageInfo_StakeToMaxCU proto.InternalMessageInfo

func (m *StakeToMaxCU) GetStakeThreshold() types.Coin {
	if m != nil {
		return m.StakeThreshold
	}
	return types.Coin{}
}

func (m *StakeToMaxCU) GetMaxComputeUnits() uint64 {
	if m != nil {
		return m.MaxComputeUnits
	}
	return 0
}

func init() {
	proto.RegisterType((*StakeToMaxCUList)(nil), "lavanet.lava.pairing.StakeToMaxCUList")
	proto.RegisterType((*StakeToMaxCU)(nil), "lavanet.lava.pairing.StakeToMaxCU")
}

func init() {
	proto.RegisterFile("pairing/stake_to_max_cu_list.proto", fileDescriptor_3371a34462f71f99)
}

var fileDescriptor_3371a34462f71f99 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0xaf, 0x18, 0x5c, 0x04, 0x28, 0xea, 0x10, 0x3a, 0x98, 0x28, 0x0b, 0x99,
	0x6c, 0xb5, 0xac, 0x2c, 0xb4, 0x03, 0x0b, 0x48, 0xa8, 0xd0, 0x85, 0x25, 0x72, 0x82, 0x95, 0x58,
	0x24, 0xb9, 0x51, 0xec, 0x54, 0x61, 0xe4, 0x0d, 0x78, 0xac, 0x8e, 0x1d, 0x99, 0x10, 0x4a, 0x5e,
	0x04, 0x39, 0x09, 0x52, 0x55, 0x31, 0x1d, 0xdb, 0xf7, 0x7e, 0xf7, 0x1e, 0x1f, 0xec, 0x15, 0x5c,
	0x96, 0x32, 0x8f, 0x99, 0xd2, 0xfc, 0x55, 0x04, 0x1a, 0x82, 0x8c, 0xd7, 0x41, 0x54, 0x05, 0xa9,
	0x54, 0x9a, 0x16, 0x25, 0x68, 0xb0, 0x27, 0x29, 0xdf, 0xf0, 0x5c, 0x68, 0x6a, 0x94, 0x0e, 0xc0,
	0x74, 0x12, 0x43, 0x0c, 0x5d, 0x03, 0x33, 0xa7, 0xbe, 0x77, 0x4a, 0x22, 0x50, 0x19, 0x28, 0x16,
	0x72, 0x25, 0xd8, 0x66, 0x16, 0x0a, 0xcd, 0x67, 0x2c, 0x02, 0x99, 0xf7, 0x75, 0xef, 0x01, 0x9f,
	0x3d, 0x9a, 0x4d, 0x4f, 0x70, 0xcf, 0xeb, 0xe5, 0xfa, 0x4e, 0x2a, 0x6d, 0x5f, 0xe3, 0x91, 0x51,
	0x07, 0xb9, 0xff, 0xfd, 0xf1, 0xdc, 0xa3, 0x7f, 0xad, 0xa3, 0xfb, 0xd4, 0x62, 0xb4, 0xfd, 0xba,
	0xb0, 0x56, 0x1d, 0xe5, 0xbd, 0x23, 0x7c, 0xbc, 0x5f, 0xb4, 0x6f, 0xf1, 0x49, 0x7f, 0x4f, 0x4a,
	0xa1, 0x12, 0x48, 0x5f, 0x1c, 0xe4, 0x22, 0x7f, 0x3c, 0x3f, 0xa7, 0xbd, 0x37, 0x6a, 0xbc, 0xd1,
	0xc1, 0x1b, 0x5d, 0x82, 0xcc, 0x87, 0x79, 0x07, 0x98, 0xed, 0xe3, 0x53, 0x33, 0x11, 0xb2, 0xa2,
	0xd2, 0x62, 0x9d, 0x4b, 0xad, 0x9c, 0x7f, 0x2e, 0xf2, 0x47, 0xab, 0xc3, 0xe7, 0xc5, 0xcd, 0xb6,
	0x21, 0x68, 0xd7, 0x10, 0xf4, 0xdd, 0x10, 0xf4, 0xd1, 0x12, 0x6b, 0xd7, 0x12, 0xeb, 0xb3, 0x25,
	0xd6, 0xf3, 0x65, 0x2c, 0x75, 0x52, 0x85, 0x34, 0x82, 0x8c, 0x0d, 0xff, 0xea, 0x94, 0xd5, 0xec,
	0x37, 0x79, 0xfd, 0x56, 0x08, 0x15, 0x1e, 0x75, 0xf9, 0x5c, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x62, 0x76, 0xec, 0xb7, 0x91, 0x01, 0x00, 0x00,
}

func (m *StakeToMaxCUList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeToMaxCUList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeToMaxCUList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStakeToMaxCuList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakeToMaxCU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeToMaxCU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeToMaxCU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxComputeUnits != 0 {
		i = encodeVarintStakeToMaxCuList(dAtA, i, uint64(m.MaxComputeUnits))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.StakeThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStakeToMaxCuList(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStakeToMaxCuList(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakeToMaxCuList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakeToMaxCUList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovStakeToMaxCuList(uint64(l))
		}
	}
	return n
}

func (m *StakeToMaxCU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakeThreshold.Size()
	n += 1 + l + sovStakeToMaxCuList(uint64(l))
	if m.MaxComputeUnits != 0 {
		n += 1 + sovStakeToMaxCuList(uint64(m.MaxComputeUnits))
	}
	return n
}

func sovStakeToMaxCuList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakeToMaxCuList(x uint64) (n int) {
	return sovStakeToMaxCuList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakeToMaxCUList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakeToMaxCuList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeToMaxCUList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeToMaxCUList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeToMaxCuList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakeToMaxCuList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakeToMaxCuList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, StakeToMaxCU{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakeToMaxCuList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakeToMaxCuList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeToMaxCU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakeToMaxCuList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeToMaxCU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeToMaxCU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeToMaxCuList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakeToMaxCuList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakeToMaxCuList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxComputeUnits", wireType)
			}
			m.MaxComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeToMaxCuList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakeToMaxCuList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakeToMaxCuList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakeToMaxCuList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakeToMaxCuList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakeToMaxCuList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakeToMaxCuList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakeToMaxCuList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakeToMaxCuList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakeToMaxCuList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakeToMaxCuList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakeToMaxCuList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakeToMaxCuList = fmt.Errorf("proto: unexpected end of group")
)
